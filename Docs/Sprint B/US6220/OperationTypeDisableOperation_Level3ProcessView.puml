@startuml OperationTypeDeleteOperation

participant "Client" as client
participant "OperationTypeController" as controller
participant "OperationTypeService" as service
participant "OperationTypeRepository" as repo
participant "OperationTypeMapper" as mapper
participant "Database" as db

client -> controller : DELETE /api/OperationType/{name}
activate controller

controller -> service : Delete(name)
activate service

service -> repo : GetOperationByNameAsync(name)
activate repo

repo -> db : Set<OperationTypeDataModel>()\n.Include(Versions)\n.FirstOrDefaultAsync(name)
activate db
db --> repo : operationDataModel
deactivate db

alt operationDataModel is null
    repo --> service : null
    service --> controller : null
    controller --> client : 404 NotFound
else operationDataModel exists
    repo -> mapper : ToDomain(operationDataModel)
    activate mapper
    mapper --> repo : operation
    deactivate mapper
    
    repo --> service : operation
    deactivate repo
    
    service -> operation : setStatus(false)
    activate operation
    operation --> service : void
    deactivate operation
    
    service -> repo : Update(operation)
    activate repo
    
    repo -> mapper : ToDataModel(operation)
    activate mapper
    mapper --> repo : operationDataModel
    deactivate mapper
    
    repo -> db : Update(operationDataModel)
    activate db
    db --> repo : entityEntry
    deactivate db
    
    repo -> db : SaveChangesAsync()
    activate db
    db --> repo : saved
    deactivate db
    
    repo -> mapper : ToDomain(savedOperation)
    activate mapper
    mapper --> repo : operation
    deactivate mapper
    
    repo --> service : operation
    deactivate repo
    
    service -> OperationTypeDTO : ToDTO(operation)
    activate OperationTypeDTO
    OperationTypeDTO --> service : operationDTO
    deactivate OperationTypeDTO
    
    service --> controller : operationDTO
    deactivate service
    
    controller --> client : 200 OK(operationDTO)
end

deactivate controller

@enduml