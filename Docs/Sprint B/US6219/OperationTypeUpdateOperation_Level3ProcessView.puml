@startuml OperationTypeUpdateOperation

participant "Client" as client
participant "OperationTypeController" as controller 
participant "OperationTypeService" as service
participant "OperationTypeRepository" as repo
participant "OperationTypeMapper" as mapper
participant "Database" as db

client -> controller : POST /api/OperationType/{name}\n(operationDTO)
activate controller

controller -> controller : ValidateModelState()

alt ModelState Invalid
    controller --> client : 400 BadRequest(ModelState)
else ModelState Valid
    controller -> service : GetByName(name)
    activate service

    service -> repo : GetOperationByNameAsync(name)
    activate repo
    
    repo -> db : Set<OperationTypeDataModel>()\n.Include(Versions)\n.ThenInclude(Phases)\n.FirstOrDefaultAsync(name)
    activate db
    db --> repo : operationDataModel
    deactivate db

    alt operationDataModel is null
        repo --> service : null
        service --> controller : null
        controller --> client : 404 NotFound
    else operationDataModel exists
        repo -> mapper : ToDomain(operationDataModel)
        activate mapper
        mapper --> repo : existingOperation
        deactivate mapper
        
        repo --> service : existingOperation
        deactivate repo

        service -> OperationTypeDTO : ToDomain(operationDTO, name)
        activate OperationTypeDTO
        OperationTypeDTO --> service : updatedOperation
        deactivate OperationTypeDTO

        service -> repo : Update(updatedOperation)
        activate repo

        repo -> mapper : ToDataModel(updatedOperation)
        activate mapper
        mapper --> repo : updatedDataModel
        deactivate mapper

        repo -> db : Update(updatedDataModel)
        activate db
        db --> repo : entityEntry
        deactivate db

        repo -> db : SaveChangesAsync()
        activate db
        db --> repo : saved
        deactivate db

        repo -> mapper : ToDomain(savedOperation)
        activate mapper
        mapper --> repo : operation
        deactivate mapper

        repo --> service : operation
        deactivate repo

        service -> OperationTypeDTO : ToDTO(operation)
        activate OperationTypeDTO
        OperationTypeDTO --> service : operationDTO
        deactivate OperationTypeDTO

        service --> controller : operationDTO
        deactivate service

        controller --> client : 200 OK(operationDTO)
    end
end

deactivate controller

@enduml