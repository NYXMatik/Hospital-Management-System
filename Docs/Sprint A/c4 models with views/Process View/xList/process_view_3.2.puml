@startuml sd

participant Route as route
participant xController as ctrl
participant xService as svc
participant xDTO as dto
participant xIRepository as irepo
participant xRepository as repo
participant xMapper as mapp
participant xDataModel as dm
participant xContext as context


activate route
route -> ctrl : GetXByY(y)
activate ctrl
ctrl -> svc : GetByY(y)
activate svc
svc -> irepo : GetXByYAsync(y)
activate irepo
irepo -> repo : implemnts GetXByYAsync
activate repo
repo -> context : Set<XDataModel>().\n.Where(p => p.y == y)\n.ToListAsync();
activate context
context --> repo : return list with all xDataModel with y
deactivate context
alt xDataModel is Active
repo -> mapp : ToDomain(X'sDataModel)
activate mapp
loop foreach(xDataModel in X'sDataModel)
    alt xDataModel is Active
        mapp -> mapp : ToDoamin(xDataModel)
        note right of mapp: See "ToDomainMapper.puml"
        mapp -> mapp : X'sDataModel.Add(xDataModel)
    end
end
mapp --> repo : return list X'sDataModel
deactivate mapp
repo --> irepo : return list with all X's
deactivate repo
irepo --> svc : return list
deactivate irepo
alt patients != null && x.Any()
    loop foreach(x in X's)
        svc -> dto : XInformationDTO.ToDTO(x)
        activate dto
        note right of dto: convert x in xDTO
        dto --> svc : return xDTO
        deactivate dto
        svc -> svc : X'sDTO.Add(xDTO)
    end
    svc --> ctrl : return list X'sDTO
end
deactivate svc
alt success case
    ctrl --> route : Send code 200 (GET)
else failure case
    ctrl --> route : Send code 404 (NOT FOUND)
end
deactivate ctrl
deactivate route

@enduml