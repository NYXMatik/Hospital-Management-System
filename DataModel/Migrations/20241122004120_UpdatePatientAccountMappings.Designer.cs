// <auto-generated />
using System;
using DataModel.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataModel.Migrations
{
    [DbContext(typeof(GenericContext))]
    [Migration("20241122004120_UpdatePatientAccountMappings")]
    partial class UpdatePatientAccountMappings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("DataModel.Model.PatientAccountDataModel", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProfileId");

                    b.ToTable("PatientAccounts");
                });

            modelBuilder.Entity("DataModel.Model.PatientAuditLogsDataModel", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientAccountDataModelProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LogId");

                    b.HasIndex("PatientAccountDataModelProfileId");

                    b.ToTable("PatientAuditLogsDataModel");
                });

            modelBuilder.Entity("DataModel.Model.PatientAccountDataModel", b =>
                {
                    b.OwnsOne("DataModel.Model.AddressDataModel", "Address", b1 =>
                        {
                            b1.Property<string>("PatientAccountDataModelProfileId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Address_Country");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PatientAccountId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Address_PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Address_State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Address_Street");

                            b1.HasKey("PatientAccountDataModelProfileId");

                            b1.ToTable("PatientAccounts");

                            b1.WithOwner()
                                .HasForeignKey("PatientAccountDataModelProfileId");
                        });

                    b.OwnsOne("DataModel.Model.ContactInfoDataModel", "ContactInfo", b1 =>
                        {
                            b1.Property<string>("PatientAccountDataModelProfileId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Contact_Email");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PatientAccountId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Contact_PhoneNumber");

                            b1.HasKey("PatientAccountDataModelProfileId");

                            b1.ToTable("PatientAccounts");

                            b1.WithOwner()
                                .HasForeignKey("PatientAccountDataModelProfileId");
                        });

                    b.OwnsOne("DataModel.Model.NameDataModel", "Name", b1 =>
                        {
                            b1.Property<string>("PatientAccountDataModelProfileId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Name_FirstName");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Name_LastName");

                            b1.HasKey("PatientAccountDataModelProfileId");

                            b1.ToTable("PatientAccounts");

                            b1.WithOwner()
                                .HasForeignKey("PatientAccountDataModelProfileId");
                        });

                    b.Navigation("Address");

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("DataModel.Model.PatientAuditLogsDataModel", b =>
                {
                    b.HasOne("DataModel.Model.PatientAccountDataModel", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("PatientAccountDataModelProfileId");
                });

            modelBuilder.Entity("DataModel.Model.PatientAccountDataModel", b =>
                {
                    b.Navigation("AuditLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
